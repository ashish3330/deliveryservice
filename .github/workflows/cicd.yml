#name: CI/CD Pipeline for Delivery service to Contabo VPS
#
#on:
#  push:
#    branches:
#      - main
#  pull_request:
#    branches:
#      - main
#
#jobs:
#  build-and-test:
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:15-alpine
#        env:
#          POSTGRES_USER: devuser
#          POSTGRES_PASSWORD: devpassword
#          POSTGRES_DB: dev_railswad_db
#        ports:
#          - 5432:5432
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Cache Gradle dependencies
#        uses: actions/cache@v4
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: ${{ runner.os }}-gradle-
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: Build with Gradle
#        run: ./gradlew clean build
#
#      - name: Run tests
#        run: ./gradlew test
#        env:
#          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/dev_railswad_db
#          SPRING_DATASOURCE_USERNAME: devuser
#          SPRING_DATASOURCE_PASSWORD: devpassword
#          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
#
#      - name: Upload test coverage report
#        uses: actions/upload-artifact@v4
#        with:
#          name: test-coverage
#          path: build/reports/jacoco/test/html
#
#  build-and-push-docker:
#    needs: build-and-test
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and push Docker image
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          file: ./Dockerfile
#          push: true
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/deliveryservice:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/deliveryservice:latest
#          platforms: linux/amd64
#
#  deploy-to-contabo:
#    needs: build-and-push-docker
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up SSH key
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts
#
#      - name: Deploy to Contabo VPS
#        run: |
#          ssh -i ~/.ssh/id_rsa admin@${{ secrets.VPS_IP }} << 'EOF'
#            # Login to Docker Hub
#            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
#
#            # Pull the latest image
#            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/deliveryservice:${{ github.sha }}
#
#            # Stop and remove existing containers
#            docker-compose -f /home/admin/deliveryservice/docker-compose.yml down || true
#
#            # Copy updated docker-compose.yml if needed
#            mkdir -p /home/admin/deliveryservice
#            cat << 'EOC' > /home/admin/deliveryservice/docker-compose.yml
#version: '3.8'
#services:
#  prod-db:
#    image: postgres:15-alpine
#    container_name: prod-db
#    environment:
#      POSTGRES_USER: produser
#      POSTGRES_PASSWORD: prodpassword
#      POSTGRES_DB: prod_railswad_db
#    ports:
#      - "5432:5432"
#    volumes:
#      - prod_data:/var/lib/postgresql/data
#  app:
#    image: ${{ secrets.DOCKERHUB_USERNAME }}/deliveryservice:${{ github.sha }}
#    container_name: deliveryservice
#    ports:
#      - "8080:8080"
#    environment:
#      SPRING_PROFILES_ACTIVE: prod
#    depends_on:
#      - prod-db
#volumes:
#  prod_data:
#  EOC
#
#  # Start containers
#  docker-compose -f /home/admin/deliveryservice/docker-compose.yml up -d
#
#  # Clean up old images
#  docker image prune -f
#  EOF